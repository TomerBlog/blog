<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on TomerN</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on TomerN</description>
    <image>
      <title>TomerN</title>
      <url>http://localhost:1313/images/tomer.jpg</url>
      <link>http://localhost:1313/images/tomer.jpg</link>
    </image>
    <generator>Hugo -- 0.146.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Aug 2025 00:14:27 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EntraGoat Scenario 2: Exploiting App-Only Graph Permissions in Entra ID</title>
      <link>http://localhost:1313/posts/scenario2/</link>
      <pubDate>Sun, 10 Aug 2025 00:14:27 +0300</pubDate>
      <guid>http://localhost:1313/posts/scenario2/</guid>
      <description>&lt;h2 id=&#34;graph-me-the-crown-and-roles&#34;&gt;Graph Me the Crown (and Roles)&lt;/h2&gt;
&lt;p&gt;EntraGoat Scenario 2 demonstrates how certificate-based authentication tied to an existing service principal and overprivileged application permissions can lead to Global Administrator compromise.&lt;/p&gt;
&lt;p&gt;The attacker starts with access to a leaked certificate that was exposed through continuous integration/continuous delivery (CI/CD) pipeline artifacts. The certificate is valid for a service principal that has the AppRoleAssignment.ReadWrite.All application permission.&lt;/p&gt;
&lt;p&gt;By authenticating in an app-only context, the attacker abuses this permission to assign another permission, RoleManagement.ReadWrite.Directory, to the same service principal. This enables the service principal to self-assign any directory role (including Global Administrator) to any service principal it wishes. Finally, the attacker resets the admin’s password and retrieves the scenario flag.&lt;/p&gt;</description>
    </item>
    <item>
      <title>EntraGoat Scenario 1: Application Ownership Compromise in Entra ID</title>
      <link>http://localhost:1313/posts/scenario1/</link>
      <pubDate>Sun, 10 Aug 2025 00:14:26 +0300</pubDate>
      <guid>http://localhost:1313/posts/scenario1/</guid>
      <description>&lt;h1 id=&#34;misowned-and-dangerous-an-owners-manual-to-global-admin&#34;&gt;Misowned and dangerous: An Owner’s Manual to Global Admin&lt;/h1&gt;
&lt;p&gt;We begin our EntraGoat use examples with Scenario 1, which we’ve named &lt;strong&gt;Misowned and Dangerous: An Owner’s Manual to Global Admin&lt;/strong&gt;. This practical exercise showcases how legitimate application ownership in Microsoft Entra ID can be leveraged to escalate privileges and compromise a Global Administrator account—enabling complete tenant takeover.&lt;/p&gt;
&lt;p&gt;Starting with a compromised low-privileged user account, the attacker discovers ownership over an enterprise application (service principal) that is assigned a privileged role.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started with EntraGoat: Breaking Entra ID the Smart Way</title>
      <link>http://localhost:1313/posts/gettingstarted/</link>
      <pubDate>Mon, 04 Aug 2025 22:35:48 +0300</pubDate>
      <guid>http://localhost:1313/posts/gettingstarted/</guid>
      <description>&lt;h1 id=&#34;getting-started-with-entragoat-breaking-entra-id-the-smart-way&#34;&gt;&lt;strong&gt;Getting Started with EntraGoat: Breaking Entra ID the Smart Way&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Semperis/EntraGoat/&#34;&gt;&lt;strong&gt;EntraGoat&lt;/strong&gt;&lt;/a&gt; is a deliberately vulnerable lab that simulates real-world identity misconfigurations in Microsoft Entra ID. Whether you&amp;rsquo;re a red teamer, blue teamer, or just curious about identity attacks, this guide will walk you through how to set up EntraGoat, launch your first challenge, and start capturing flags like a pro.&lt;/p&gt;
&lt;h2 id=&#34;what-is-entragoat&#34;&gt;What is EntraGoat?&lt;/h2&gt;
&lt;p&gt;Imagine a playground where you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escalate a user to Global Admin&lt;/li&gt;
&lt;li&gt;Chain permissions via the Graph API&lt;/li&gt;
&lt;li&gt;Abuse misconfigured apps and service principals&lt;/li&gt;
&lt;li&gt;Activate privileged roles to reset global admin’s MFA&lt;/li&gt;
&lt;li&gt;Simulate attacks without endangering production environments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s exactly what &lt;strong&gt;EntraGoat&lt;/strong&gt; offers: a CTF-style platform for identity exploitation learning in the cloud (&lt;em&gt;Figure 1&lt;/em&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is Entra Goat?</title>
      <link>http://localhost:1313/posts/whatisentra/</link>
      <pubDate>Mon, 04 Aug 2025 22:35:48 +0300</pubDate>
      <guid>http://localhost:1313/posts/whatisentra/</guid>
      <description>&lt;h2 id=&#34;what-is-entragoat-a-deliberately-vulnerable-microsoft-entra-id-lab&#34;&gt;What Is EntraGoat? A Deliberately Vulnerable Microsoft Entra ID Lab&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Meet EntraGoat: &lt;em&gt;Figure 1&lt;/em&gt; shows a preview of what you’re getting into.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/posts/whatisentra/dashboard.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figure 1. EntraGoat start screen&lt;/p&gt;
&lt;h2 id=&#34;why-do-identity-security-defenders-need-entragoat&#34;&gt;Why do identity security defenders need EntraGoat?&lt;/h2&gt;
&lt;p&gt;Modern Entra ID environments are a goldmine for attackers. Over-permissioned apps, stale group assignments, and mismanaged service principals offer more than enough to escalate to Global Administrator with a few clever moves.&lt;/p&gt;
&lt;p&gt;EntraGoat reproduces these attack paths inside your &lt;em&gt;own&lt;/em&gt; test tenant, giving you a safe and reproducible playground to learn, teach, test, or validate:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
